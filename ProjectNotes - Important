 קובץ הערות שרועי צריך להכיר

 1. self.height = 0
 השדה הזה במחלקה של node היה מאותחל בקובץ המקורי ל1-
 שיניתי אותו ל0 כי זה עובד, ולא היה לי זמן להבין איך לגרום לזה לעבוד עם מינוס 1
 בבקשה אל תשנה בינתיים זה דופק את הפונקציות, ומקסימום יורידו עליו נקודה כי אני לא יודעת אם זה חוקי לשנות שדות נתונים

 2. כמו שאתה יכול לראות במחלקות לכל שדה יש פונקציית get שמחזירה אותו
 ממש בקושי עבדתי איתן (באמת סתם מנוחות וכי זה היה לי מהיר יותר)
 ובמקום לגשת ככה:
 self.getLeft()
 עשיתי:
 self.left
 תכננתי לשנות בסוף,כשנראה שיש לזה זמן כי זה לא אלגנטי לגשת ישר לשדות כשיש פונקציות get
 אבל מבחינתי אפשר גם להשאיר ככה ואולי יורידו קצת ניקוד

 3. כתבתי את הסיבוכיות של הפונקציות שמימשתי בתוך הdocstring שלהן
 אם לא כתבתי זה בטעות או כי היא O(1) (ביקשו לתעד פונקציות עם לולאת ורקורסיה, אז אתה יכול לקחת את מה שכתבתי לקובץ תיעוד ולפרט למה (הן פועלות בדיוק כמו שלמדנו))

 3. כתבתי את כל התיעוד וההערות ממש מהר בניסיון לחסוך זמן ולרוץ קדימה עם המימוש אני מאמינה שהן יחסית ברורות
 בכל מקרה יכול להיות שמרוב העתק הדבק של docstrings יכולים להיות מקומות שטעיתי שכחתי לשנות סוג פרמטר וכו
עברתי על הקובץ,  אבל מן הסתם מוזמן לתקן אם אתה תופס אותן כזוג עיניים נוספות

4. תשים לב שביקשו את כל המחלקות באותו קובץ יחיד ובשמות מסוימים,
בסוף לא עבדתי עם המחלקה שיצרת בהתחלה (היא לא עבדה שלחתי לך למה אולי פספסת)
ולא רציתי לבזבז זמן אז מימשתי הכל ישירות במחלקות הנתונות

6. נכון לרגע זה הפונקציות שכתבתי עובדות (עשיתי לא מעט טסטים לכל אחת מהן ובינתיים לא תפסתי באגים),
כמובן שאני כותבת את זה כי כנראה שיכולים להיות באגים אלה החיים ולא באמת בדקתי מקרים מסובכים מאוד
הן עובדות בסיבוכיות הרגילה למה שלמדנו בכיתה אז אין סיבה שתיגע בהן כדי לנסות לייעל או משהו כזה
אני כן אציין שהן לא כתובות הכי אלגנטי, יש מקומות שקיים שכפול קוד ועוד כל מיני דברים שלא הייתי עושה אם הייתי רוצה ממש לייפות אותו
אבל מן הסתם ניסיתי לחסוך זמן ולרוץ עם המימוש
אם יישאר זמן אפשר לסדר, לקצר ולייפות אותן
אבל בינתיים עד שלא סיימנו את המימוש והחלק התיאורטי מבקשת שלא תיגע ותבזבז את הזמן על מה שלא עשינו עדיין :)

7. בנים וירטואלים - אתה תראה בפורומים כל מיני שאלות עליהם - אני בחרתי לממש עם None (בערך של הצומת) ולא עם מחלקה נפרדת אתה כנראה לא תצטרך את זה זה בעיקר בשביל הרוטציות אבל שתכיר

8. משאירה לך לעשות את ה4 פונקציות ששלחתי לך שחסרות (הן כנראה כולן מתבססות על פונקציות שכתבתי אז באמת לא תצטרך לגעת יותר מידי ברמת ההתעסקות עם הצמתים ואפשר לממש ברמת הפונקציות בהנגשתי לך)
ובנוסף אליהן את הקובץ תיעוד של הסיבוכיות (זה רק לפרט יפה את הפונקציות והזמני ריצה בנוסף למה שמתועד בקוד)
ואז נוכל לעשות את החלק התיאורטי שאני מקווה שלא כבד

9. מאמינה שלא הסתכלת בפורום אבל ביטלו שאלה מסוימת בחלק התיאורטי אז כותבת פה שנזכור לא לעשות אותה בטעות


10. בקובץ main יש בדיקה בסיסית ממש בקטנה כי זה הקובץ שהשתמשתי בו להריץ דברים
מוזמן להתעלם ממנו או להשתמש בו

3/1 - Roy:
1. Fixed is_real_node
2. added "regular_insertion()" to insert nodes by key and not by index to the AVLTreeList
3. added "append()" as an "insert_last" to the AVLTreeList
3. sort() -> _sort_rec performs a preorder traversal recursion and regular_inserts root by value to resulting AVLTree
4. permutation creates an AVLTreeList of the indices, then picks a randint (0, n) and appends self[i] to results iff i is still unused
5. concat(self, lst) traverses lst in-order and appends the elements one by one to self
6. search(val) traverses self in-order until found node.value == val then returns index.


rebalance:
        elif balance_factor < -1:
            right_bf = self.right.getBF()
            if right_bf > 0:
                rotations_counter += 2
                # case of right-left rotate (double)
                rotations_counter += 2

left and right rotate?